<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>CVTrackpad: OpenCV::Bitmap::Image Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.html"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.html"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenCV.html">OpenCV</a>::<a class="el" href="namespaceOpenCV_1_1Bitmap.html">Bitmap</a>::<a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a>
  </div>
</div>
<div class="contents">
<h1>OpenCV::Bitmap::Image Class Reference</h1><!-- doxytag: class="OpenCV::Bitmap::Image" --><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> Implements General Constructors an utilities for manipulate images or CvArray-based Matrix.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Image_8h_source.html">Image.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OpenCV::Bitmap::Image:</div>
<div class="dynsection">

<p><center><img src="classOpenCV_1_1Bitmap_1_1Image.png" usemap="#OpenCV::Bitmap::Image_map" border="0" alt=""></center>
<map name="OpenCV::Bitmap::Image_map">
<area href="classOpenCV_1_1Bitmap_1_1DrawableImage.html" alt="OpenCV::Bitmap::DrawableImage" shape="rect" coords="0,56,213,80">
<area href="classOpenCV_1_1Bitmap_1_1ProcessableImage.html" alt="OpenCV::Bitmap::ProcessableImage" shape="rect" coords="223,56,436,80">
</map>
</div>

<p>
<a href="classOpenCV_1_1Bitmap_1_1Image-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#78042c90454ec8669b61ae3f7d8523a6">Image</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#ebf2192f5754c2890e561f3adb3405fb">Image</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#8e8f2574b4d25ae5e8ceb7ab571de0a0">Image</a> (IplImage *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#972739c450c9034d0294a2cf0fa1e3c7">Image</a> (const char *)  throw (FileNotFoundException)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#cb85960cb1680d0c53f8d5ac0558f0bc">Image</a> (CvSize, int=UByte, int=3)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default Constructor.  <a href="#cb85960cb1680d0c53f8d5ac0558f0bc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#e1034226fb0320ec6aaa4e1f58fdcc23">~Image</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">CvSize&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#466cefc646352bd3fe9c890a43d578e2">size</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets Image's Size.  <a href="#466cefc646352bd3fe9c890a43d578e2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#63e829e63b7e4159e1aa67e30320a322">width</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#379b3d4ba3ecd8de7f625ce6ac33069c">height</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#5e6719148021739722e363186bfcf2a2">depth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets Color Depth from enum Depth.  <a href="#5e6719148021739722e363186bfcf2a2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#567d011d4d55c36c20bd5c5c669a4c90">numberOfChannels</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets channels Count. 3 for color or 1 for BW.  <a href="#567d011d4d55c36c20bd5c5c669a4c90"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#9c3919ec8ca578a81d3dfa62086ca987">rawData</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets pointer for image's RAW data(Bitmap). Be careful with big-endian processors.  <a href="#9c3919ec8ca578a81d3dfa62086ca987"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">IplImage *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#cc7bda23a88a670711b3a6aff9fc9039">cvImage</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets pointer to OpenCV's image format.  <a href="#cc7bda23a88a670711b3a6aff9fc9039"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#065759202e9d06839face7ed78dc05c1">setCvImage</a> (IplImage *cvImage)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets OpenCV's <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a>. It does not delete last image.  <a href="#065759202e9d06839face7ed78dc05c1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#3eaa1304204a99d7fa7fcc0ebdbd2475">operator==</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Only compare pointers.  <a href="#3eaa1304204a99d7fa7fcc0ebdbd2475"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#60bc77aa39e71ad84fea011933c84676">operator=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Operator for copy image.  <a href="#60bc77aa39e71ad84fea011933c84676"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#30af5cfba1cad846aab82fed49533766">operator+</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical Add for each pixel.  <a href="#30af5cfba1cad846aab82fed49533766"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#22b57d4151baf5f56f4533c22adeabec">operator+=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical Acomulate for each pixel.  <a href="#22b57d4151baf5f56f4533c22adeabec"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#700ce37196e27b45fce2e4128120f461">operator-</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical Substraction for each pixel.  <a href="#700ce37196e27b45fce2e4128120f461"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#fafa480ad05c3656553308bf0f5479b9">operator-=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical Substraction for each pixel.  <a href="#fafa480ad05c3656553308bf0f5479b9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#5e67a83578a7293ae504518c12239b81">operator*</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Matrix multiply.  <a href="#5e67a83578a7293ae504518c12239b81"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#e8c1553ccb767fdb40b95aedbecc7007">operator*=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Matrix Multiply.  <a href="#e8c1553ccb767fdb40b95aedbecc7007"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#0df53f8ff8ed3cb277a15eca338d8fc4">operator*</a> (double)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Multiply each pixel.  <a href="#0df53f8ff8ed3cb277a15eca338d8fc4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#43e68d6d5aa23a62fcf23fc50c94fe6c">operator*=</a> (double)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Multiply each pixel.  <a href="#43e68d6d5aa23a62fcf23fc50c94fe6c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#af17de1d3424a6f27eb81de760616e5b">operator/</a> (double value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Divide each pixel.  <a href="#af17de1d3424a6f27eb81de760616e5b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#2d1167242d64a9cf46b5f9e4ccb552d8">operator/=</a> (double value)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Divide each pixel.  <a href="#2d1167242d64a9cf46b5f9e4ccb552d8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#1dd989cbee8b5a142f5da6d00fb1df41">operator!</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary Not for each pixel.  <a href="#1dd989cbee8b5a142f5da6d00fb1df41"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#10aef7a898e706c8d8a82345775e34be">operator&amp;</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary And for each pixel.  <a href="#10aef7a898e706c8d8a82345775e34be"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#3baa7cdaffdfb0d8bd028167f70a8c3e">operator&amp;=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary And for each pixel.  <a href="#3baa7cdaffdfb0d8bd028167f70a8c3e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#0ee78c5e3961b92be0da26d30022cfbf">operator|</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary Or for each pixel.  <a href="#0ee78c5e3961b92be0da26d30022cfbf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#b0e1614674146499f1296e5de1e6f406">operator|=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary Or for each pixel.  <a href="#b0e1614674146499f1296e5de1e6f406"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#c2bc180b0ca8dc0dc484fe74983f1b07">operator^</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary Xor for each pixel.  <a href="#c2bc180b0ca8dc0dc484fe74983f1b07"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#6f2cdf6f5769061f943d7a48e711bc8b">operator^=</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Logical binary Xor for each pixel.  <a href="#6f2cdf6f5769061f943d7a48e711bc8b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#39b64b36b632b782708e6c74b4d45976">absDiff</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Absolute difference for each pixel.  <a href="#39b64b36b632b782708e6c74b4d45976"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#c7ef76de73d76f2dc0ad021b7920134a">clone</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy's the image in separete region of memory.  <a href="#c7ef76de73d76f2dc0ad021b7920134a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#ef07441998dd1acc50d7b3a10ef0da75">resize</a> (CvSize, int=Nearest)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Utility to convert Image's Color type.  <a href="#ef07441998dd1acc50d7b3a10ef0da75"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#5c137732d40fed2e3ad856b4ccf2a3be">convert</a> (int)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Utility to convert this Image's Color type.  <a href="#5c137732d40fed2e3ad856b4ccf2a3be"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#e41c5968a1319b147503efff5f7e18a8">flip</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Flips <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> horizontaly.  <a href="#e41c5968a1319b147503efff5f7e18a8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#527771ab13daa7892248681299225b9b">showImage</a> (const char *)</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#1937072ddc68d4617ca2e5eba6ef8861">convert</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *, int)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Utility to convert Image's Color type.  <a href="#1937072ddc68d4617ca2e5eba6ef8861"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#7b7b7c2b7398b98b888edc11e703189f">resize</a> (const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *, CvSize, int=Nearest)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Utility to convert Image's Color type.  <a href="#7b7b7c2b7398b98b888edc11e703189f"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">IplImage *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#d7fcfe7523e3ef1e0c881a9f59b894d8">m_image</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> Implements General Constructors an utilities for manipulate images or CvArray-based Matrix. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="78042c90454ec8669b61ae3f7d8523a6"></a><!-- doxytag: member="OpenCV::Bitmap::Image::Image" ref="78042c90454ec8669b61ae3f7d8523a6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenCV::Bitmap::Image::Image           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="Image_8cpp_source.html#l00206">absDiff()</a>, <a class="el" href="Image_8cpp_source.html#l00088">clone()</a>, <a class="el" href="Image_8cpp_source.html#l00074">convert()</a>, <a class="el" href="Image_8cpp_source.html#l00160">operator!()</a>, <a class="el" href="Image_8cpp_source.html#l00167">operator&amp;()</a>, <a class="el" href="Image_8cpp_source.html#l00147">operator*()</a>, <a class="el" href="Image_8cpp_source.html#l00121">operator+()</a>, <a class="el" href="Image_8cpp_source.html#l00134">operator-()</a>, <a class="el" href="Image_8cpp_source.html#l00193">operator^()</a>, <a class="el" href="Image_8cpp_source.html#l00180">operator|()</a>, <a class="el" href="Image_8cpp_source.html#l00081">resize()</a>, and <a class="el" href="ProcessableImage_8cpp_source.html#l00122">OpenCV::Bitmap::ProcessableImage::warpPerspective()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ebf2192f5754c2890e561f3adb3405fb"></a><!-- doxytag: member="OpenCV::Bitmap::Image::Image" ref="ebf2192f5754c2890e561f3adb3405fb" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenCV::Bitmap::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8e8f2574b4d25ae5e8ceb7ab571de0a0"></a><!-- doxytag: member="OpenCV::Bitmap::Image::Image" ref="8e8f2574b4d25ae5e8ceb7ab571de0a0" args="(IplImage *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenCV::Bitmap::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">IplImage *&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="972739c450c9034d0294a2cf0fa1e3c7"></a><!-- doxytag: member="OpenCV::Bitmap::Image::Image" ref="972739c450c9034d0294a2cf0fa1e3c7" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenCV::Bitmap::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>imagePath</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td>  throw (<a class="el" href="classOpenCV_1_1FileNotFoundException.html">FileNotFoundException</a>)<code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cb85960cb1680d0c53f8d5ac0558f0bc"></a><!-- doxytag: member="OpenCV::Bitmap::Image::Image" ref="cb85960cb1680d0c53f8d5ac0558f0bc" args="(CvSize, int=UByte, int=3)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenCV::Bitmap::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">CvSize&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>depth</em> = <code>UByte</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>channels</em> = <code>3</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default Constructor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size</em>&nbsp;</td><td>Image's Size </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>depth</em>&nbsp;</td><td>Image's color depth. By default UByte </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>channels</em>&nbsp;</td><td>Image's channels count. 3 for color[Default] 1 for B/W </td></tr>
  </table>
</dl>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="e1034226fb0320ec6aaa4e1f58fdcc23"></a><!-- doxytag: member="OpenCV::Bitmap::Image::~Image" ref="e1034226fb0320ec6aaa4e1f58fdcc23" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenCV::Bitmap::Image::~Image           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="39b64b36b632b782708e6c74b4d45976"></a><!-- doxytag: member="OpenCV::Bitmap::Image::absDiff" ref="39b64b36b632b782708e6c74b4d45976" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::absDiff           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Absolute difference for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c7ef76de73d76f2dc0ad021b7920134a"></a><!-- doxytag: member="OpenCV::Bitmap::Image::clone" ref="c7ef76de73d76f2dc0ad021b7920134a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> * OpenCV::Bitmap::Image::clone           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy's the image in separete region of memory. 
<p>

<p>References <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, and <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="Histogram_8cpp_source.html#l00130">OpenCV::Bitmap::Histogram::equalizeHist()</a>, <a class="el" href="main_8cpp_source.html#l00093">main()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00102">OpenCV::VectorizedGraphics::OpticalObject::maskFromUnconnectedMask()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00094">OpenCV::Bitmap::ProcessableImage::morphologyEx()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00084">OpenCV::VectorizedGraphics::OpticalObject::opticalObjectsFromImage()</a>, and <a class="el" href="OpticalFlowLK_8cpp_source.html#l00105">OpenCV::VectorizedGraphics::OpticalFlowLK::seedImage()</a>.</p>

</div>
</div><p>
<a class="anchor" name="5c137732d40fed2e3ad856b4ccf2a3be"></a><!-- doxytag: member="OpenCV::Bitmap::Image::convert" ref="5c137732d40fed2e3ad856b4ccf2a3be" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenCV::Bitmap::Image::convert           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flags</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility to convert this Image's Color type. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>flags</em>&nbsp;</td><td>Conversion Flags, from enum Conversion </td></tr>
  </table>
</dl>

<p>Reimplemented in <a class="el" href="classOpenCV_1_1Bitmap_1_1ProcessableImage.html#100a15ac500d045b1c03f159df2fc49e">OpenCV::Bitmap::ProcessableImage</a>.</p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00116">size()</a>, and <a class="el" href="Image_8h_source.html#l00059">OpenCV::Bitmap::UByte</a>.</p>

</div>
</div><p>
<a class="anchor" name="1937072ddc68d4617ca2e5eba6ef8861"></a><!-- doxytag: member="OpenCV::Bitmap::Image::convert" ref="1937072ddc68d4617ca2e5eba6ef8861" args="(const Image *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> * OpenCV::Bitmap::Image::convert           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *&nbsp;</td>
          <td class="paramname"> <em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flags</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility to convert Image's Color type. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>image</em>&nbsp;</td><td><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> to be converted </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>flags</em>&nbsp;</td><td>Conversion Flags, from enum Conversion </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Converted <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> </dd></dl>

<p>References <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00116">size()</a>, and <a class="el" href="Image_8h_source.html#l00059">OpenCV::Bitmap::UByte</a>.</p>

<p>Referenced by <a class="el" href="OpticalFlowLK_8cpp_source.html#l00133">OpenCV::VectorizedGraphics::OpticalFlowLK::calcOpticalFlow()</a>, <a class="el" href="HaarClassifier_8cpp_source.html#l00075">OpenCV::MachineLearning::HaarClassifier::findObjects()</a>, <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00150">OpenCV::Bitmap::CodeBookSubstraction::generateBackground()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00102">OpenCV::VectorizedGraphics::OpticalObject::maskFromUnconnectedMask()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00084">OpenCV::VectorizedGraphics::OpticalObject::opticalObjectsFromImage()</a>, <a class="el" href="OpticalFlowLK_8cpp_source.html#l00105">OpenCV::VectorizedGraphics::OpticalFlowLK::seedImage()</a>, and <a class="el" href="BackgroundSubtraction_8h_source.html#l00138">OpenCV::Bitmap::CodeBookSubstraction::toYUV()</a>.</p>

</div>
</div><p>
<a class="anchor" name="cc7bda23a88a670711b3a6aff9fc9039"></a><!-- doxytag: member="OpenCV::Bitmap::Image::cvImage" ref="cc7bda23a88a670711b3a6aff9fc9039" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">IplImage* OpenCV::Bitmap::Image::cvImage           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets pointer to OpenCV's image format. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="Histogram_8cpp_source.html#l00217">OpenCV::Bitmap::Histogram::calcBackProjection()</a>, <a class="el" href="OpticalFlowLK_8cpp_source.html#l00133">OpenCV::VectorizedGraphics::OpticalFlowLK::calcOpticalFlow()</a>, <a class="el" href="Histogram_8cpp_source.html#l00114">OpenCV::Bitmap::Histogram::create1ChHistogram()</a>, <a class="el" href="Histogram_8cpp_source.html#l00062">OpenCV::Bitmap::Histogram::createHSHistogram()</a>, <a class="el" href="Histogram_8cpp_source.html#l00091">OpenCV::Bitmap::Histogram::createRGBHistogram()</a>, <a class="el" href="Histogram_8cpp_source.html#l00130">OpenCV::Bitmap::Histogram::equalizeHist()</a>, <a class="el" href="HaarClassifier_8cpp_source.html#l00075">OpenCV::MachineLearning::HaarClassifier::findObjects()</a>, <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00080">OpenCV::Bitmap::CodeBookSubstraction::learnBackground()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00102">OpenCV::VectorizedGraphics::OpticalObject::maskFromUnconnectedMask()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00160">OpenCV::VectorizedGraphics::OpticalObject::polygonalContours()</a>, <a class="el" href="OpticalFlowLK_8cpp_source.html#l00105">OpenCV::VectorizedGraphics::OpticalFlowLK::seedImage()</a>, <a class="el" href="OFLKTracker_8cpp_source.html#l00060">OpenCV::Tracking::OFLKTracker::startTracking()</a>, <a class="el" href="MeanShift_8cpp_source.html#l00071">OpenCV::Tracking::MeanShift::startTracking()</a>, <a class="el" href="MeanShift_8cpp_source.html#l00114">OpenCV::Tracking::MeanShift::track()</a>, <a class="el" href="CAMShift_8cpp_source.html#l00072">OpenCV::Tracking::CAMShift::track()</a>, and <a class="el" href="VideoWriter_8cpp_source.html#l00057">OpenCV::VideoIO::VideoWriter::writeFrame()</a>.</p>

</div>
</div><p>
<a class="anchor" name="5e6719148021739722e363186bfcf2a2"></a><!-- doxytag: member="OpenCV::Bitmap::Image::depth" ref="5e6719148021739722e363186bfcf2a2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenCV::Bitmap::Image::depth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets Color Depth from enum Depth. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="Image_8cpp_source.html#l00206">absDiff()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00115">OpenCV::Bitmap::ProcessableImage::convert()</a>, <a class="el" href="Image_8cpp_source.html#l00160">operator!()</a>, <a class="el" href="Image_8cpp_source.html#l00167">operator&amp;()</a>, <a class="el" href="Image_8cpp_source.html#l00147">operator*()</a>, <a class="el" href="Image_8cpp_source.html#l00121">operator+()</a>, <a class="el" href="Image_8cpp_source.html#l00134">operator-()</a>, <a class="el" href="Image_8cpp_source.html#l00193">operator^()</a>, <a class="el" href="Image_8cpp_source.html#l00180">operator|()</a>, <a class="el" href="Image_8cpp_source.html#l00081">resize()</a>, and <a class="el" href="ImageViewWidget_8cpp_source.html#l00067">GUI::ImageViewWidget::showImage()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e41c5968a1319b147503efff5f7e18a8"></a><!-- doxytag: member="OpenCV::Bitmap::Image::flip" ref="e41c5968a1319b147503efff5f7e18a8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenCV::Bitmap::Image::flip           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Flips <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> horizontaly. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="379b3d4ba3ecd8de7f625ce6ac33069c"></a><!-- doxytag: member="OpenCV::Bitmap::Image::height" ref="379b3d4ba3ecd8de7f625ce6ac33069c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenCV::Bitmap::Image::height           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="DrawableImage_8h_source.html#l00086">OpenCV::Bitmap::DrawableImage::clear()</a>, <a class="el" href="HaarClassifier_8cpp_source.html#l00075">OpenCV::MachineLearning::HaarClassifier::findObjects()</a>, <a class="el" href="ImageViewWidget_8cpp_source.html#l00067">GUI::ImageViewWidget::showImage()</a>, <a class="el" href="MeanShift_8cpp_source.html#l00114">OpenCV::Tracking::MeanShift::track()</a>, and <a class="el" href="CAMShift_8cpp_source.html#l00072">OpenCV::Tracking::CAMShift::track()</a>.</p>

</div>
</div><p>
<a class="anchor" name="567d011d4d55c36c20bd5c5c669a4c90"></a><!-- doxytag: member="OpenCV::Bitmap::Image::numberOfChannels" ref="567d011d4d55c36c20bd5c5c669a4c90" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenCV::Bitmap::Image::numberOfChannels           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets channels Count. 3 for color or 1 for BW. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="Image_8cpp_source.html#l00206">absDiff()</a>, <a class="el" href="OpticalFlowLK_8cpp_source.html#l00133">OpenCV::VectorizedGraphics::OpticalFlowLK::calcOpticalFlow()</a>, <a class="el" href="HaarClassifier_8cpp_source.html#l00075">OpenCV::MachineLearning::HaarClassifier::findObjects()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00102">OpenCV::VectorizedGraphics::OpticalObject::maskFromUnconnectedMask()</a>, <a class="el" href="Image_8cpp_source.html#l00160">operator!()</a>, <a class="el" href="Image_8cpp_source.html#l00167">operator&amp;()</a>, <a class="el" href="Image_8cpp_source.html#l00147">operator*()</a>, <a class="el" href="Image_8cpp_source.html#l00121">operator+()</a>, <a class="el" href="Image_8cpp_source.html#l00134">operator-()</a>, <a class="el" href="Image_8cpp_source.html#l00193">operator^()</a>, <a class="el" href="Image_8cpp_source.html#l00180">operator|()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00084">OpenCV::VectorizedGraphics::OpticalObject::opticalObjectsFromImage()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00160">OpenCV::VectorizedGraphics::OpticalObject::polygonalContours()</a>, <a class="el" href="Image_8cpp_source.html#l00081">resize()</a>, <a class="el" href="OpticalFlowLK_8cpp_source.html#l00105">OpenCV::VectorizedGraphics::OpticalFlowLK::seedImage()</a>, and <a class="el" href="ImageViewWidget_8cpp_source.html#l00067">GUI::ImageViewWidget::showImage()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1dd989cbee8b5a142f5da6d00fb1df41"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator!" ref="1dd989cbee8b5a142f5da6d00fb1df41" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator!           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary Not for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="10aef7a898e706c8d8a82345775e34be"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator&amp;" ref="10aef7a898e706c8d8a82345775e34be" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator&amp;           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary And for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3baa7cdaffdfb0d8bd028167f70a8c3e"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator&amp;=" ref="3baa7cdaffdfb0d8bd028167f70a8c3e" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator&amp;=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary And for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="0df53f8ff8ed3cb277a15eca338d8fc4"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator*" ref="0df53f8ff8ed3cb277a15eca338d8fc4" args="(double)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a>&amp; OpenCV::Bitmap::Image::operator*           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Multiply each pixel. 
<p>
<dl class="todo" compact><dt><b><a class="el" href="todo.html#_todo000004">Todo:</a></b></dt><dd></dd></dl>

</div>
</div><p>
<a class="anchor" name="5e67a83578a7293ae504518c12239b81"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator*" ref="5e67a83578a7293ae504518c12239b81" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator*           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Matrix multiply. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="43e68d6d5aa23a62fcf23fc50c94fe6c"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator*=" ref="43e68d6d5aa23a62fcf23fc50c94fe6c" args="(double)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a>&amp; OpenCV::Bitmap::Image::operator*=           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Multiply each pixel. 
<p>
<dl class="todo" compact><dt><b><a class="el" href="todo.html#_todo000005">Todo:</a></b></dt><dd></dd></dl>

</div>
</div><p>
<a class="anchor" name="e8c1553ccb767fdb40b95aedbecc7007"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator*=" ref="e8c1553ccb767fdb40b95aedbecc7007" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator*=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Matrix Multiply. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="30af5cfba1cad846aab82fed49533766"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator+" ref="30af5cfba1cad846aab82fed49533766" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator+           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical Add for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="22b57d4151baf5f56f4533c22adeabec"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator+=" ref="22b57d4151baf5f56f4533c22adeabec" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator+=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical Acomulate for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="700ce37196e27b45fce2e4128120f461"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator&#45;" ref="700ce37196e27b45fce2e4128120f461" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator-           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical Substraction for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="fafa480ad05c3656553308bf0f5479b9"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator&#45;=" ref="fafa480ad05c3656553308bf0f5479b9" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator-=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical Substraction for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="af17de1d3424a6f27eb81de760616e5b"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator/" ref="af17de1d3424a6f27eb81de760616e5b" args="(double value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a>&amp; OpenCV::Bitmap::Image::operator/           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>value</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Divide each pixel. 
<p>

</div>
</div><p>
<a class="anchor" name="2d1167242d64a9cf46b5f9e4ccb552d8"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator/=" ref="2d1167242d64a9cf46b5f9e4ccb552d8" args="(double value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a>&amp; OpenCV::Bitmap::Image::operator/=           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>value</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Divide each pixel. 
<p>

</div>
</div><p>
<a class="anchor" name="60bc77aa39e71ad84fea011933c84676"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator=" ref="60bc77aa39e71ad84fea011933c84676" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Operator for copy image. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="3eaa1304204a99d7fa7fcc0ebdbd2475"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator==" ref="3eaa1304204a99d7fa7fcc0ebdbd2475" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenCV::Bitmap::Image::operator==           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Only compare pointers. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="c2bc180b0ca8dc0dc484fe74983f1b07"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator^" ref="c2bc180b0ca8dc0dc484fe74983f1b07" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator^           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary Xor for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6f2cdf6f5769061f943d7a48e711bc8b"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator^=" ref="6f2cdf6f5769061f943d7a48e711bc8b" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator^=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary Xor for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="0ee78c5e3961b92be0da26d30022cfbf"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator|" ref="0ee78c5e3961b92be0da26d30022cfbf" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator|           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary Or for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, and <a class="el" href="Image_8h_source.html#l00116">size()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b0e1614674146499f1296e5de1e6f406"></a><!-- doxytag: member="OpenCV::Bitmap::Image::operator|=" ref="b0e1614674146499f1296e5de1e6f406" args="(const Image &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp; OpenCV::Bitmap::Image::operator|=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>image</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Logical binary Or for each pixel. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="9c3919ec8ca578a81d3dfa62086ca987"></a><!-- doxytag: member="OpenCV::Bitmap::Image::rawData" ref="9c3919ec8ca578a81d3dfa62086ca987" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* OpenCV::Bitmap::Image::rawData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets pointer for image's RAW data(Bitmap). Be careful with big-endian processors. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00137">OpenCV::Bitmap::CodeBookSubstraction::codeBookDepth()</a>, <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00150">OpenCV::Bitmap::CodeBookSubstraction::generateBackground()</a>, <a class="el" href="ImageViewWidget_8cpp_source.html#l00067">GUI::ImageViewWidget::showImage()</a>, and <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00099">OpenCV::Bitmap::CodeBookSubstraction::subtractBackground()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ef07441998dd1acc50d7b3a10ef0da75"></a><!-- doxytag: member="OpenCV::Bitmap::Image::resize" ref="ef07441998dd1acc50d7b3a10ef0da75" args="(CvSize, int=Nearest)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenCV::Bitmap::Image::resize           </td>
          <td>(</td>
          <td class="paramtype">CvSize&nbsp;</td>
          <td class="paramname"> <em>newSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>method</em> = <code>Nearest</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility to convert Image's Color type. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>newSize</em>&nbsp;</td><td>Returned image's new size </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>method</em>&nbsp;</td><td>Resize Method. From enum InterpolationMethod </td></tr>
  </table>
</dl>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, and <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7b7b7c2b7398b98b888edc11e703189f"></a><!-- doxytag: member="OpenCV::Bitmap::Image::resize" ref="7b7b7c2b7398b98b888edc11e703189f" args="(const Image *, CvSize, int=Nearest)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> * OpenCV::Bitmap::Image::resize           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html">Image</a> *&nbsp;</td>
          <td class="paramname"> <em>image</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CvSize&nbsp;</td>
          <td class="paramname"> <em>newSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>method</em> = <code>Nearest</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility to convert Image's Color type. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>image</em>&nbsp;</td><td><a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> to be converted </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>newSize</em>&nbsp;</td><td>Returned image's new size </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>method</em>&nbsp;</td><td>Resize Method. From enum InterpolationMethod </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Resized <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a> </dd></dl>

<p>References <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="Image_8cpp_source.html#l00037">Image()</a>, <a class="el" href="Image_8h_source.html#l00194">m_image</a>, and <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>.</p>

<p>Referenced by <a class="el" href="HaarClassifier_8cpp_source.html#l00075">OpenCV::MachineLearning::HaarClassifier::findObjects()</a>, <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00080">OpenCV::Bitmap::CodeBookSubstraction::learnBackground()</a>, and <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00099">OpenCV::Bitmap::CodeBookSubstraction::subtractBackground()</a>.</p>

</div>
</div><p>
<a class="anchor" name="065759202e9d06839face7ed78dc05c1"></a><!-- doxytag: member="OpenCV::Bitmap::Image::setCvImage" ref="065759202e9d06839face7ed78dc05c1" args="(IplImage *cvImage)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenCV::Bitmap::Image::setCvImage           </td>
          <td>(</td>
          <td class="paramtype">IplImage *&nbsp;</td>
          <td class="paramname"> <em>cvImage</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets OpenCV's <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html" title="Image Implements General Constructors an utilities for manipulate images or CvArray-based...">Image</a>. It does not delete last image. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

</div>
</div><p>
<a class="anchor" name="527771ab13daa7892248681299225b9b"></a><!-- doxytag: member="OpenCV::Bitmap::Image::showImage" ref="527771ab13daa7892248681299225b9b" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenCV::Bitmap::Image::showImage           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>windowName</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="main_8cpp_source.html#l00093">main()</a>, and <a class="el" href="ScreenRecognizer_8cpp_source.html#l00137">HumanInterface::ScreenRecognizer::newFrameForRecognize()</a>.</p>

</div>
</div><p>
<a class="anchor" name="466cefc646352bd3fe9c890a43d578e2"></a><!-- doxytag: member="OpenCV::Bitmap::Image::size" ref="466cefc646352bd3fe9c890a43d578e2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">CvSize OpenCV::Bitmap::Image::size           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Gets Image's Size. 
<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="Image_8cpp_source.html#l00206">absDiff()</a>, <a class="el" href="Histogram_8cpp_source.html#l00217">OpenCV::Bitmap::Histogram::calcBackProjection()</a>, <a class="el" href="DrawableImage_8h_source.html#l00086">OpenCV::Bitmap::DrawableImage::clear()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00115">OpenCV::Bitmap::ProcessableImage::convert()</a>, <a class="el" href="Image_8cpp_source.html#l00074">convert()</a>, <a class="el" href="Histogram_8cpp_source.html#l00062">OpenCV::Bitmap::Histogram::createHSHistogram()</a>, <a class="el" href="Histogram_8cpp_source.html#l00091">OpenCV::Bitmap::Histogram::createRGBHistogram()</a>, <a class="el" href="main_8cpp_source.html#l00093">main()</a>, <a class="el" href="OpticalObject_8cpp_source.html#l00102">OpenCV::VectorizedGraphics::OpticalObject::maskFromUnconnectedMask()</a>, <a class="el" href="ScreenRecognizer_8cpp_source.html#l00137">HumanInterface::ScreenRecognizer::newFrameForRecognize()</a>, <a class="el" href="Image_8cpp_source.html#l00160">operator!()</a>, <a class="el" href="Image_8cpp_source.html#l00167">operator&amp;()</a>, <a class="el" href="Image_8cpp_source.html#l00147">operator*()</a>, <a class="el" href="Image_8cpp_source.html#l00121">operator+()</a>, <a class="el" href="Image_8cpp_source.html#l00134">operator-()</a>, <a class="el" href="Image_8cpp_source.html#l00193">operator^()</a>, <a class="el" href="Image_8cpp_source.html#l00180">operator|()</a>, <a class="el" href="OFLKTracker_8cpp_source.html#l00060">OpenCV::Tracking::OFLKTracker::startTracking()</a>, <a class="el" href="MeanShift_8cpp_source.html#l00071">OpenCV::Tracking::MeanShift::startTracking()</a>, <a class="el" href="BackgroundSubtraction_8cpp_source.html#l00099">OpenCV::Bitmap::CodeBookSubstraction::subtractBackground()</a>, <a class="el" href="OFLKTracker_8cpp_source.html#l00091">OpenCV::Tracking::OFLKTracker::track()</a>, and <a class="el" href="ProcessableImage_8cpp_source.html#l00074">OpenCV::Bitmap::ProcessableImage::warpPerspective()</a>.</p>

</div>
</div><p>
<a class="anchor" name="63e829e63b7e4159e1aa67e30320a322"></a><!-- doxytag: member="OpenCV::Bitmap::Image::width" ref="63e829e63b7e4159e1aa67e30320a322" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenCV::Bitmap::Image::width           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>References <a class="el" href="Image_8h_source.html#l00194">m_image</a>.</p>

<p>Referenced by <a class="el" href="DrawableImage_8h_source.html#l00086">OpenCV::Bitmap::DrawableImage::clear()</a>, <a class="el" href="HaarClassifier_8cpp_source.html#l00075">OpenCV::MachineLearning::HaarClassifier::findObjects()</a>, <a class="el" href="ImageViewWidget_8cpp_source.html#l00067">GUI::ImageViewWidget::showImage()</a>, <a class="el" href="MeanShift_8cpp_source.html#l00114">OpenCV::Tracking::MeanShift::track()</a>, and <a class="el" href="CAMShift_8cpp_source.html#l00072">OpenCV::Tracking::CAMShift::track()</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="d7fcfe7523e3ef1e0c881a9f59b894d8"></a><!-- doxytag: member="OpenCV::Bitmap::Image::m_image" ref="d7fcfe7523e3ef1e0c881a9f59b894d8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">IplImage* <a class="el" href="classOpenCV_1_1Bitmap_1_1Image.html#d7fcfe7523e3ef1e0c881a9f59b894d8">OpenCV::Bitmap::Image::m_image</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="Image_8cpp_source.html#l00206">absDiff()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00068">OpenCV::Bitmap::ProcessableImage::adaptiveThreshold()</a>, <a class="el" href="ProcessableImage_8h_source.html#l00133">OpenCV::Bitmap::ProcessableImage::canny()</a>, <a class="el" href="Image_8cpp_source.html#l00088">clone()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00115">OpenCV::Bitmap::ProcessableImage::convert()</a>, <a class="el" href="Image_8cpp_source.html#l00074">convert()</a>, <a class="el" href="Image_8h_source.html#l00127">cvImage()</a>, <a class="el" href="Image_8h_source.html#l00120">depth()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00068">OpenCV::Bitmap::DrawableImage::drawBox()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00073">OpenCV::Bitmap::DrawableImage::drawCircle()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00106">OpenCV::Bitmap::DrawableImage::drawContour()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00058">OpenCV::Bitmap::DrawableImage::drawLine()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00095">OpenCV::Bitmap::DrawableImage::drawObject()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00063">OpenCV::Bitmap::DrawableImage::drawRectangle()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00083">OpenCV::Bitmap::DrawableImage::drawText()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00104">OpenCV::Bitmap::ProcessableImage::findChessboardCorners()</a>, <a class="el" href="Image_8h_source.html#l00188">flip()</a>, <a class="el" href="Image_8h_source.html#l00118">height()</a>, <a class="el" href="Image_8cpp_source.html#l00054">Image()</a>, <a class="el" href="ProcessableImage_8h_source.html#l00154">OpenCV::Bitmap::ProcessableImage::inpaint()</a>, <a class="el" href="ProcessableImage_8h_source.html#l00147">OpenCV::Bitmap::ProcessableImage::meanShiftFiltering()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00094">OpenCV::Bitmap::ProcessableImage::morphologyEx()</a>, <a class="el" href="Image_8h_source.html#l00122">numberOfChannels()</a>, <a class="el" href="Image_8cpp_source.html#l00160">operator!()</a>, <a class="el" href="Image_8cpp_source.html#l00167">operator&amp;()</a>, <a class="el" href="Image_8cpp_source.html#l00174">operator&amp;=()</a>, <a class="el" href="Image_8cpp_source.html#l00147">operator*()</a>, <a class="el" href="Image_8cpp_source.html#l00154">operator*=()</a>, <a class="el" href="Image_8cpp_source.html#l00121">operator+()</a>, <a class="el" href="Image_8cpp_source.html#l00128">operator+=()</a>, <a class="el" href="Image_8cpp_source.html#l00134">operator-()</a>, <a class="el" href="Image_8cpp_source.html#l00141">operator-=()</a>, <a class="el" href="Image_8cpp_source.html#l00115">operator=()</a>, <a class="el" href="Image_8cpp_source.html#l00110">operator==()</a>, <a class="el" href="Image_8cpp_source.html#l00193">operator^()</a>, <a class="el" href="Image_8cpp_source.html#l00200">operator^=()</a>, <a class="el" href="Image_8cpp_source.html#l00180">operator|()</a>, <a class="el" href="Image_8cpp_source.html#l00187">operator|=()</a>, <a class="el" href="Image_8h_source.html#l00124">rawData()</a>, <a class="el" href="Image_8cpp_source.html#l00081">resize()</a>, <a class="el" href="Image_8h_source.html#l00129">setCvImage()</a>, <a class="el" href="Image_8cpp_source.html#l00215">showImage()</a>, <a class="el" href="Image_8h_source.html#l00116">size()</a>, <a class="el" href="ProcessableImage_8h_source.html#l00131">OpenCV::Bitmap::ProcessableImage::sobel()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00063">OpenCV::Bitmap::ProcessableImage::threshold()</a>, <a class="el" href="ProcessableImage_8cpp_source.html#l00122">OpenCV::Bitmap::ProcessableImage::warpPerspective()</a>, <a class="el" href="Image_8h_source.html#l00117">width()</a>, <a class="el" href="DrawableImage_8cpp_source.html#l00052">OpenCV::Bitmap::DrawableImage::~DrawableImage()</a>, <a class="el" href="Image_8cpp_source.html#l00068">~Image()</a>, and <a class="el" href="ProcessableImage_8cpp_source.html#l00057">OpenCV::Bitmap::ProcessableImage::~ProcessableImage()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Image_8h_source.html">Image.h</a><li><a class="el" href="Image_8cpp.html">Image.cpp</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Mon Jun 1 19:41:27 2009 for CVTrackpad by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
